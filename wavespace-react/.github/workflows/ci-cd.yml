name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  CACHE_DEPENDENCY_PATH: package-lock.json

jobs:
  # 코드 품질 검사 및 테스트
  quality-check:
    name: Quality Check & Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

    - name: 의존성 설치
      run: npm ci

    - name: TypeScript 타입 체크
      run: npm run type-check

    - name: ESLint 검사
      run: npm run lint

    - name: Prettier 검사
      run: npm run format:check

    - name: 테스트 실행
      run: npm run test -- --coverage --run
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

    - name: 커버리지 업로드
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: 테스트 결과 업로드
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          test-results/

  # 보안 검사
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 의존성 설치
      run: npm ci

    - name: 보안 취약점 검사
      run: npm audit --audit-level=high

    - name: CodeQL 분석 시작
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: CodeQL 분석
      uses: github/codeql-action/analyze@v3

  # 빌드 테스트
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: quality-check
    strategy:
      matrix:
        environment: [development, staging, production]
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 의존성 설치
      run: npm ci

    - name: 빌드 (${{ matrix.environment }})
      run: npm run build
      env:
        VITE_ENV: ${{ matrix.environment }}
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

    - name: 빌드 아티팩트 업로드
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.environment }}
        path: dist/
        retention-days: 7

    - name: 빌드 크기 분석
      run: |
        echo "### 빌드 크기 분석 (${{ matrix.environment }})" >> $GITHUB_STEP_SUMMARY
        echo "| 파일 | 크기 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|" >> $GITHUB_STEP_SUMMARY
        find dist -name "*.js" -o -name "*.css" | head -10 | while read file; do
          size=$(du -h "$file" | cut -f1)
          echo "| $file | $size |" >> $GITHUB_STEP_SUMMARY
        done

  # 개발 환경 배포
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan, build-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 의존성 설치
      run: npm ci

    - name: 빌드
      run: npm run build
      env:
        VITE_ENV: development
        VITE_SUPABASE_URL: ${{ secrets.DEV_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.DEV_SUPABASE_ANON_KEY }}

    - name: Vercel 배포
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}

  # 스테이징 환경 배포
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan, build-test]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 의존성 설치
      run: npm ci

    - name: 빌드
      run: npm run build
      env:
        VITE_ENV: staging
        VITE_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}

    - name: Vercel 배포
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}

    - name: 스테이징 환경 검증
      run: |
        sleep 30  # 배포 완료 대기
        curl -f https://staging-wavespace.vercel.app/health-check || exit 1

  # 프로덕션 배포
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan, build-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 의존성 설치
      run: npm ci

    - name: 빌드
      run: npm run build
      env:
        VITE_ENV: production
        VITE_SUPABASE_URL: ${{ secrets.PROD_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.PROD_SUPABASE_ANON_KEY }}

    - name: Vercel 프로덕션 배포
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}

    - name: 프로덕션 환경 검증
      run: |
        sleep 60  # 배포 완료 대기
        curl -f https://wavespace.kr/health-check || exit 1

    - name: 배포 성공 알림
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: ':rocket: 프로덕션 배포가 성공적으로 완료되었습니다!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: 배포 실패 알림
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: ':x: 프로덕션 배포가 실패했습니다. 확인이 필요합니다.'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 성능 테스트
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Lighthouse CI 실행
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://staging-wavespace.vercel.app
          https://staging-wavespace.vercel.app/forum
          https://staging-wavespace.vercel.app/points/ranking
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # 의존성 업데이트 체크
  dependency-check:
    name: Dependency Update Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 의존성 업데이트 확인
      run: |
        npx npm-check-updates --doctor
        npx npm-check-updates --format group

    - name: 업데이트 가능한 패키지 알림
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: ":package: 업데이트 가능한 의존성이 있습니다. package.json을 확인해주세요."
          }
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

# 스케줄 작업 (매주 월요일 오전 9시)
  scheduled-dependency-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
      - name: 의존성 체크
        run: echo "Scheduled dependency check"

# 스케줄 설정
on:
  schedule:
    - cron: '0 9 * * 1'  # 매주 월요일 오전 9시 (UTC)